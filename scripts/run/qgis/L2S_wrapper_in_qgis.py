
# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
								 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							 -------------------
		begin                : 2024-12-13
		git sha              : $Format:%H$
		copyright            : (C) 2024 by Center of Exploration Targeting, UWA
		email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


#!/usr/bin/env python
# coding: utf-8

from map2loop.project import Project
from map2loop.m2l_enums import VerboseLevel
import LoopProjectFile as LPF
import LoopStructural
import numpy as np
from scipy.interpolate import RegularGridInterpolator
import time
import os, ast, shutil
from osgeo import gdal
from LoopStructural.modelling import (
	LoopProjectfileProcessor as LPFProcessor,
)




class LoopStructural_Wrapper_Qgis:
	"""
	Wrapper class for running LoopStructural processes in QGIS.
	This class handles geological modeling, file management, and logging within a QGIS environment.
	"""
	
	def __init__(self, param_conf, run_log_listWidget, vtk_directory):
		"""
		Initialize the wrapper with configuration parameters and logging widget.

		:param param_conf: Dictionary containing model configuration parameters.
		:param run_log_listWidget: QListWidget for displaying logs in the QGIS UI.
		:param vtk_directory: Directory where VTK files will be stored.
		"""
		self.param_conf = param_conf
		self.run_log_listWidget = run_log_listWidget
		self.vtk_directory = vtk_directory
	
	def run_all(self, **kwargs):
		"""
		Runs the full LoopStructural modeling process, configures parameters, and saves output to VTK.
		
		:return: Path to the saved VTK files.
		"""
		t1 = time.time()
		LPFilename = self.param_conf["LPFilename"]  

		# Extract model parameters
		fault_params = {
			"interpolatortype": str(self.param_conf["interpolatortype"]),             
			"nelements": float(self.param_conf["fault nelements"]),             
		}
		
		foliation_params = {
			"interpolatortype": str(self.param_conf["interpolatortype"]),            
			"nelements": float(self.param_conf["foliation nelements"]),        
			"regularisation": int(self.param_conf["regularisation"]),                
		}

		self.run_log_listWidget.addItem(f"Fault parameters: {fault_params}")
		self.run_log_listWidget.addItem(f"Foliation parameters: {foliation_params}")

		# Process project file
		projFile = LPF.ProjectFile(LPFilename)
		processedData = LPFProcessor(projFile)
		processedData.foliation_properties["sg"] = foliation_params
		processedData.fault_properties["interpolatortype"] = fault_params["interpolatortype"]
		processedData.fault_properties["nelements"] = fault_params["nelements"]
		
		# Generate geological model
		model = LoopStructural.GeologicalModel.from_processor(processedData)
		model.update()

		# Ensure output directory exists
		model_name = "output_data"
		full_path = os.path.abspath(model_name)
		os.makedirs(full_path, exist_ok=True)
		print(f"Output folder: {full_path}")

		# Ensure VTK directory exists
		vtk_path = os.path.join(full_path, "vtk")
		os.makedirs(vtk_path, exist_ok=True)

		# Save model
		full_vtk_path = os.path.join(vtk_path, "model_surface.vtk")
		try:
			model.save(full_vtk_path)
			self.run_log_listWidget.addItem(f"Successfully saved: {full_vtk_path}")
		except Exception as e:
			self.run_log_listWidget.addItem(f"Error saving {full_vtk_path}: {e}")

		# Calculate runtime
		total_time = time.time() - t1
		time_str = f"{total_time:.2f} sec" if total_time < 60 else f"{total_time/60:.2f} min"
		self.run_log_listWidget.addItem(f"LoopStructural completed in {time_str}")
		self.run_log_listWidget.addItem("LoopStructural run successfully!")

		return vtk_path
	
	def move_vtk_files(self, source_directory, target_directory):
		"""
		Moves VTK files from the source directory to the target directory.
		
		:param source_directory: Directory containing VTK files.
		:param target_directory: Destination directory for the VTK files.
		:return: List of moved file paths.
		"""
		os.makedirs(target_directory, exist_ok=True)
		moved_files = []

		vtk_files = [f for f in os.listdir(source_directory) if f.endswith(".vtk")]
		for idx, filename in enumerate(vtk_files, start=1):
			source_path = os.path.join(source_directory, filename)
			destination_path = os.path.join(target_directory, filename)
			shutil.move(source_path, destination_path)
			moved_files.append(destination_path)
			self.run_log_listWidget.addItem(f"Moved: {source_path} -> {destination_path}")
			
			if idx == len(vtk_files):
				self.run_log_listWidget.addItem("All VTK files successfully moved.")

		return moved_files
