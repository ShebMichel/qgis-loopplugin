# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
								 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							 -------------------
		begin                : 2024-12-13
		git sha              : $Format:%H$
		copyright            : (C) 2024 by Center of Exploration Targeting, UWA
		email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import shutil
import subprocess
import platform
import os
from pathlib import Path

def find_docker_path():
	"""
	Finds the Docker executable path.

	Returns:
		str: Full path to Docker executable if found.
		None: If Docker is not found.
	"""
	docker_path = shutil.which("docker")
	
	if docker_path:
		return docker_path

	if platform.system() == "Windows":
		possible_paths = [
			r"C:\Program Files\Docker\Docker\resources\bin\docker.exe",
			r"C:\Program Files\Docker\Docker\cli-plugins\docker.exe"
		]
		for path in possible_paths:
			if os.path.exists(path):
				return path

	return None


def is_docker_running(docker_path):
	"""
	Checks if the Docker daemon is running.
	Args:
		docker_path: (str): docker exe path to run docker ps
	Returns:
		bool: True if Docker is running, False otherwise.
	"""
	if not docker_path:
		print("Docker is not installed.")
		return False
	
	try:
		subprocess.run([docker_path, "info"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		return True  # Docker is running
	except subprocess.CalledProcessError:
		print("Docker is installed but not running.")
		return False
	except FileNotFoundError:
		print("Docker executable not found.")
		return False


def is_container_running(container_name, docker_path):
	"""
	Checks if a specific Docker container with name (container_name) is running.
	Args:
		container_name (str): Name of the container to check.
		docker_path: (str): docker exe path to run docker ps
	Returns:
		bool: True if the container is running, False otherwise.
	"""
	
	if not docker_path:
		return False

	try:
		result = subprocess.run([docker_path, "ps", "--filter", f"name={container_name}", "--format", "{{.Names}}"],
								check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
		containers = result.stdout.strip().split("\n")

		if container_name in containers:
			print(f"Container '{container_name}' is already running.")
			return True

		return False
	except subprocess.CalledProcessError:
		print(f"Error checking container '{container_name}'.")
		return False


def start_map2loop_container():
	"""
	Starts the 'map2loop' container using docker-compose if it's not running.
	"""
	if is_container_running("map2loop"):
		print("Map2Loop container is already running.")
		return

	print("Starting Map2Loop container...")

	try:
		# Run docker-compose to build and start the container
		subprocess.run(["docker-compose", "up", "-d"], check=True)
		print("Map2Loop container started successfully.")
	except subprocess.CalledProcessError as e:
		print(f"Error starting Map2Loop container: {e}")
	except FileNotFoundError:
		print("Error: docker-compose not found. Make sure it's installed.")


def build_map2loop_container(docker_exe_path,docker_compose_file_path):
	"""
	Builds the 'map2loop server' container using docker-compose from Docker and docker-compose.yml files.
	The Dockerfile and docker-compose.yml
	"""
	print("Building Map2Loop container...")	
	try:
		result = subprocess.run(
			[
				docker_exe_path,
				"compose",
				"-f",
				docker_compose_file_path,
				"up",
				"-d",
				"--build",
			],
			capture_output=True,
			text=True,
			shell=True,
		)
		if result.returncode != 0:
			print("Error:", result.stderr)
			return result.stderr
		else:
			print("Output :", result.stdout)

			return result.stdout,result.returncode
		print("Map2Loop container built successfully.")
	except subprocess.CalledProcessError as e:
		print(f"Error building Map2Loop container: {e}")
	except FileNotFoundError:
		print("Error: docker-compose not found. Make sure it's installed.")
	return

