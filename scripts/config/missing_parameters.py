# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
								 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							 -------------------
		begin                : 2024-12-13
		git sha              : $Format:%H$
		copyright            : (C) 2024 by Center of Exploration Targeting, UWA
		email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from PyQt5.QtWidgets import QMessageBox, QInputDialog

def fill_up_map2loop_parameters(self,m2l_list_of_label,m2l_list_of_input):
	# This function is use to fill up parameters, and generate empty box to fill in case any linedit was empty
	self.m2l_list_of_label = m2l_list_of_label
	self.m2l_list_of_input = m2l_list_of_input
	par_dict ={}
	for lbl, vinput in zip(self.m2l_list_of_label, self.m2l_list_of_input):
	   
		while not vinput:  # Keep prompting until a value is entered
			vinput, ok = QInputDialog.getText(
				None, "Missing Input", f"Enter a value for {lbl.text()}:"
			)

			if not ok:  # If user cancels, exit the loop and continue
				print(f"Skipping {lbl.text()} due to missing value.")
				break

		if vinput:  # If the user entered a value, attempt conversion
			try:
				vinput = float(vinput)
				# convert decimator to integer
				if lbl.text()=='Sampler Decimator':
					vinput=int(vinput)
				par_dict[str(lbl.text())]=vinput
			except ValueError:
				QMessageBox.warning(
					None,
					"Invalid Input",
					f"Invalid number for {lbl.text()}! Please enter a valid number.",
				)
		 
	return par_dict


def fill_up_preprocessor_parameters(self, preproc_list_of_label, preproc_list_of_input, proc_Widgelist):
    """
    This function fills up parameters and generates default folder names if the input field is empty.
    The output is a dictionary where the folder name is the key and its label text is the value.
    """
    self.preproc_list_of_label = preproc_list_of_label
    self.preproc_list_of_input = preproc_list_of_input
    self.proc_Widgelist = proc_Widgelist
    
    par_dict = {}
    
    for lbl, vinput in zip(self.preproc_list_of_label, self.preproc_list_of_input):
        if not vinput.text():  # Assign default values if empty
            folder_name = f"{lbl.text().replace(' ', '_').lower()}"
            vinput.setText(folder_name)
            self.proc_Widgelist.addItem(f" {folder_name} folder is created")
        else:
            folder_name = vinput.text()
        
        # Store folder name as key and label text as value
        par_dict[lbl.text()] = folder_name
        
        # Disable input field
        vinput.setEnabled(False)
    
    return par_dict