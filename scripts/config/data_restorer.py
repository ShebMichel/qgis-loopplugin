# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
                                 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Center of Exploration Targeting, UWA
        email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import json
import os
from PyQt5.QtWidgets import QComboBox,QLineEdit

class DataRestorer:
    def __init__(self, flag, combo_boxes, param_boxes, sill_QLineEdit, intrusion_QLineEdit, json_file):
        """
        Initialize the DataRestorer with required parameters.

        :param flag: The condition flag (e.g., 'fault_json_checkBox').
        :param combo_boxes: List of combo box widgets.
        :param param_boxes: List of parameter input widgets.
        :param sill_QLineEdit: LineEdit widget for 'sill' data.
        :param intrusion_QLineEdit: LineEdit widget for 'intrusion' data.
        :param data: Dictionary containing the JSON data.
        """
        self.flag = flag
        self.json_file =json_file
        self.combo_boxes = combo_boxes
        self.param_boxes = param_boxes
        self.sill_QLineEdit = sill_QLineEdit
        self.intrusion_QLineEdit = intrusion_QLineEdit
        self.data = self.read_data()


    def read_data(self):
        """
        Reads data from the JSON file. Returns an empty dictionary if the file doesn't exist or is empty.
        
        :return: Dictionary containing data from the JSON file
        """
        try:
            with open(self.json_file, 'r') as file:
                data = json.load(file)
                return data
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
   

    def restore_data(self):
        """
        Populates each combo box with the corresponding values from the JSON file.
        Sets the current item of each combo box and updates parameter inputs.
        """
        print(f"The flag is {self.flag}")

        if self.flag == 'fault_json_checkBox':
            self._populate_combo_boxes(self.data['FAULT JSON'])
            self._populate_param_boxes(self.data['fault_params'])
            self._set_text_values(self.data['fault_head'], fault_keys=['Fault Text', 'fdipest Text'])

        elif self.flag == 'struct_json_checkBox':
            self._populate_combo_boxes(self.data['STRUCT JSON'])
            self._populate_param_boxes(self.data['struct_params'])
            self._set_text_values(self.data['struct_head'], struct_keys=['Bedding Text', 'Overturned Text'])

        else:  # Default case for 'GEOL JSON'
            self._populate_combo_boxes(self.data['GEOL JSON'])
            self._populate_param_boxes(self.data['geology_params'], special_handling=True)
            self._set_text_values(self.data['geology_head'], geology_keys=['intrusion', 'sill'])

    def _populate_combo_boxes(self, json_data):
        """
        Clears and populates combo boxes with values from the JSON data.
        
        :param json_data: Dictionary of values for combo boxes.
        """
        for combo_box, (_, values) in zip(self.combo_boxes, json_data.items()):
            combo_box.clear()
            combo_box.setEnabled(True)
            combo_box.addItems(values)

    def _populate_param_boxes(self, param_data, special_handling=False):
        """
        Updates parameter input boxes with values, including special handling if needed.
        
        :param param_data: Dictionary of parameter values.
        :param special_handling: Whether to handle specific conditions for certain parameters.
        """
        for param, (key, value) in zip(self.param_boxes, param_data.items()):
            if special_handling:
                if key == 'Pluton Form':
                    value = self._get_alternate_values(value, ['domes', 'saucers', 'pendant'])
                    param.addItems(value)
                elif key == 'Intrusion Mode':
                    value = self._get_alternate_values(value, ['0', '1'])
                    param.addItems(value)
                else:
                    param.setText(str(value))
            else:
                param.setText(str(value))

            param.setEnabled(True)

    def _set_text_values(self, head_data, fault_keys=None, struct_keys=None, geology_keys=None):
        """
        Sets text values for specific LineEdit widgets based on the provided keys.
        
        :param head_data: Dictionary of head data values.
        :param fault_keys: List of keys for fault-specific data.
        :param struct_keys: List of keys for structure-specific data.
        :param geology_keys: List of keys for geology-specific data.
        """
        keys_to_check = fault_keys or struct_keys or geology_keys

        for key, value in head_data.items():
            if key in keys_to_check:
                if key == 'Fault Text' or key == 'Bedding Text' or key == 'sill':
                    self.sill_QLineEdit.setText(str(value))
                    self.sill_QLineEdit.setEnabled(True)
                elif key == 'fdipest Text' or key == 'Overturned Text' or key == 'intrusion':
                    self.intrusion_QLineEdit.setText(str(value))
                    self.intrusion_QLineEdit.setEnabled(True)

    def _get_alternate_values(self, current_value, options):
        """
        Returns a reordered list of options with the current value as the first element.
        
        :param current_value: The current parameter value.
        :param options: List of all possible values.
        :return: Reordered list of options.
        """
        return [current_value] + [opt for opt in options if opt != current_value]
