# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
                                 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Center of Exploration Targeting, UWA
        email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from ..structure.struct_handler import StructLayerHandler
from ..fault.fault_handler import FaultLayerHandler
from ..geology.geology_handler import GeologyLayerHandler
from .data_restorer import DataRestorer
from .json_file_handler import JSONDataPathHandler


class LayerCheckboxHandler:
    """
    A class to handle checkbox toggling events for different layer types,
    utilizing existing specialized handlers.
    """
    def __init__(self, parent,geology_log,fault_log,structure_log):
        """
        Initialize the LayerCheckboxHandler with the parent widget containing all UI elements.
        
        Args:
            parent: The parent widget containing all the UI elements
        """
        self.parent          = parent
        self.json_data_path  = None
        
        # Initialize handlers as None
        self.struct_handler  = None
        self.geology_handler = None
        self.fault_handler   = None
        self.geology_log     = geology_log
        self.fault_log       = fault_log
        self.structure_log   = structure_log
    
    

    def handle_checkbox_toggle(self, layer_type):
        """
        Generic handler for checkbox toggle events.
        
        Args:
            layer_type (str): Type of layer ('struct', 'geology', or 'fault')
        """
        # Map of layer types to their respective UI elements and handlers
        layer_configs = {
            'struct': {
                'qgis_checkbox': self.parent.struct_Qgis_checkBox,
                'json_checkbox': self.parent.struct_json_checkBox,
                'qgis_handler_class': StructLayerHandler,
                'handler_args': {
                    'struct_combobox': self.parent.struct_Qgis_comboBox,
                    'struct_button': self.parent.struct_Ok_pushButton,
                    'struct_clear_button': self.parent.struct_clear_pushButton,
                    'struct_line_edit': self.parent.struct_QLineEdit,
                    'sqgis_cbox': self.parent.struct_Qgis_checkBox,
                    'sjson_cbox': self.parent.struct_json_checkBox,
                    'struct_combo_boxes': self.parent.struct_combo_boxes,
                    'struct_param_boxes': self.parent.struct_param_boxes,
                    'struct_tableWidget': self.parent.struct_tableWidget,
                    'struct_bedding_QLineEdit': self.parent.struct_bedding_QLineEdit,
                    'struct_overturned_QLineEdit': self.parent.struct_overturned_QLineEdit,
                    'struct_log_listWidget':self.parent.struct_log_listWidget
                },
                'combo_boxes': self.parent.struct_combo_boxes,
                'param_boxes': self.parent.struct_param_boxes,
                'sill_edit': self.parent.struct_bedding_QLineEdit,
                'intrusion_edit': self.parent.struct_overturned_QLineEdit
            },
            'geology': {
                'qgis_checkbox': self.parent.geology_Qgis_checkBox,
                'json_checkbox': self.parent.geology_json_checkBox,
                'qgis_handler_class': GeologyLayerHandler,
                'handler_args': {
                    'geology_combobox': self.parent.geology_Qgis_comboBox,
                    'geology_button': self.parent.geology_Ok_pushButton,
                    'clear_button': self.parent.geology_clear_pushButton,
                    'geology_line_edit': self.parent.geology_QLineEdit,
                    'qgis_cbox': self.parent.geology_Qgis_checkBox,
                    'json_cbox': self.parent.geology_json_checkBox,
                    'geology_combo_boxes': self.parent.geology_combo_boxes,
                    'geology_param_boxes': self.parent.geology_param_boxes,
                    'geology_tableWidget': self.parent.geology_tableWidget,
                    'sill_QLineEdit': self.parent.geology_sill_QLineEdit,
                    'intrusion_QLineEdit': self.parent.geology_intrusion_QLineEdit,
                    'geology_log_listWidget' : self.parent.geology_log_listWidget
                },
                'combo_boxes': self.parent.geology_combo_boxes,
                'param_boxes': self.parent.geology_param_boxes,
                'sill_edit': self.parent.geology_sill_QLineEdit,
                'intrusion_edit': self.parent.geology_intrusion_QLineEdit
            },
            'fault': {
                'qgis_checkbox': self.parent.fault_Qgis_checkBox,
                'json_checkbox': self.parent.fault_json_checkBox,
                'qgis_handler_class': FaultLayerHandler,
                'handler_args': {
                    'fault_combobox': self.parent.fault_Qgis_comboBox,
                    'fault_button': self.parent.fault_Ok_pushButton,
                    'fault_clear_button': self.parent.fault_clear_pushButton,
                    'fault_line_edit': self.parent.fault_QLineEdit,
                    'fqgis_cbox': self.parent.fault_Qgis_checkBox,
                    'fjson_cbox': self.parent.fault_json_checkBox,
                    'fault_combo_boxes': self.parent.fault_combo_boxes,
                    'fault_param_boxes': self.parent.fault_param_boxes,
                    'fault_tableWidget': self.parent.fault_tableWidget,
                    'fault_ftext_QLineEdit': self.parent.fault_ftext_QLineEdit,
                    'fault_fdipest_QLineEdit': self.parent.fault_fdipest_QLineEdit,
                    'fault_log_listWidget': self.parent.fault_log_listWidget
                },
                'combo_boxes': self.parent.fault_combo_boxes,
                'param_boxes': self.parent.fault_param_boxes,
                'sill_edit': self.parent.fault_ftext_QLineEdit,
                'intrusion_edit': self.parent.fault_fdipest_QLineEdit
            }
        }

        config = layer_configs[layer_type]
        
        # Disable both checkboxes
        config['qgis_checkbox'].setEnabled(False)
        config['json_checkbox'].setEnabled(False)
        
        #print(f" What is the button click? {self.parent.sender().objectName()}")
        
        if self.parent.sender().objectName() == f"{layer_type}_Qgis_checkBox":
            # Create and store the appropriate handler
            handler = config['qgis_handler_class'](**config['handler_args'])
            if layer_type == 'struct':
                self.struct_handler = handler
                self.struct_handler.populate_struct_layers()
            elif layer_type == 'geology':
                self.geology_handler = handler
                self.geology_handler.populate_geology_layers()
            elif layer_type == 'fault':
                self.fault_handler = handler
                self.fault_handler.populate_fault_layers()
        else:
            # Handle JSON data restoration
            json_handler = JSONDataPathHandler()
            self.json_data_path = json_handler.ensure_json_data_path()
            
            # Use the direct references from config
            restorer = DataRestorer(
                flag=self.parent.sender().objectName(),
                combo_boxes=config['combo_boxes'],
                param_boxes=config['param_boxes'],
                sill_QLineEdit=config['sill_edit'],
                intrusion_QLineEdit=config['intrusion_edit'],
                json_file=self.json_data_path
            )
            restorer.restore_data()

    def struct_on_checkbox_toggled(self):
        """Slot for structure checkbox toggle."""
        self.handle_checkbox_toggle('struct')

    def geology_on_checkbox_toggled(self):
        """Slot for geology checkbox toggle."""
        self.handle_checkbox_toggle('geology')

    def fault_on_checkbox_toggled(self):
        """Slot for fault checkbox toggle."""
        self.handle_checkbox_toggle('fault')


