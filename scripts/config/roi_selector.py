# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
                                 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Center of Exploration Targeting, UWA
        email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.core import QgsVectorLayer, QgsProject
from qgis.PyQt.QtWidgets import QMessageBox, QListWidget
from typing import List, Optional

class RoishapefileSelector:
    """
    A class to handle shapefile selection from QGIS panel 
    and populate them to a QListWidget, focusing on files with no attribute data.
    """
    def __init__(self, list_widget: QListWidget):
        """
        Initialize the shapefile selector.
        
        Args:
            list_widget: QListWidget where shapefile paths will be displayed
        """
        self.list_widget = list_widget

    def has_no_data(self, layer: QgsVectorLayer) -> bool:
        """
        Check if a vector layer has no attribute data.
        
        Args:
            layer: QgsVectorLayer to check
            
        Returns:
            bool: True if layer has no data fields (except default ones)
        """
        fields = layer.fields()
        # Get number of fields, excluding default ones like 'fid' or 'id'
        non_default_fields = [field.name().lower() for field in fields 
                            if field.name().lower() not in ['fid', 'id', 'ogc_fid']]
        return len(non_default_fields) == 0

    def get_no_data_shapefiles(self) -> List[tuple]:
        """
        Get file paths of all shapefiles with no attribute data in QGIS project.
        
        Returns:
            List of tuples containing (layer name, file path)
        """
        project = QgsProject.instance()
        no_data_shapefiles = []
        
        for layer in project.mapLayers().values():
            if isinstance(layer, QgsVectorLayer):
                # Check if layer has no attribute data
                if self.has_no_data(layer):
                    no_data_shapefiles.append((layer.name(), layer.source()))
                
        return no_data_shapefiles

    def select_shapefile(self) -> Optional[str]:
        """
        Select a shapefile path from available no-data shapefiles.
        
        Returns:
            Selected shapefile path or None if no selection was made
        """
        no_data_shapefiles = self.get_no_data_shapefiles()
        
        if not no_data_shapefiles:
            QMessageBox.warning(
                None,
                "No Shapefiles Without Data",
                "No shapefiles without attribute data found in the project."
            )
            return None
            
        if len(no_data_shapefiles) == 1:
            return no_data_shapefiles[0][1]
            
        # If multiple shapefiles found, show selection dialog
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Question)
        msg_box.setWindowTitle("Select Shapefile")
        msg_box.setText("Multiple shapefiles without attribute data found. Please select one:")
        
        buttons = []
        for layer_name, path in no_data_shapefiles:
            button_text = f"{layer_name} ({path})"
            button = msg_box.addButton(button_text, QMessageBox.ActionRole)
            buttons.append(button)
        
        cancel_button = msg_box.addButton("Cancel", QMessageBox.RejectRole)
        
        msg_box.exec_()
        clicked_button = msg_box.clickedButton()
        
        if clicked_button == cancel_button:
            return None
            
        selected_index = buttons.index(clicked_button)
        return no_data_shapefiles[selected_index][1]

    def append_to_list_widget(self) -> None:
        """
        Select a shapefile and append its path to the list widget.
        """
        selected_path = self.select_shapefile()
        if selected_path:
            # Check if path already exists in list widget
            path_exists = False
            for i in range(self.list_widget.count()):
                if self.list_widget.item(i).text() == selected_path:
                    path_exists = True
                    break
            
            if not path_exists:
                self.list_widget.addItem(selected_path)
            return selected_path

    def remove_selected_item(self) -> None:
        """
        Remove the currently selected item from the list widget.
        """
        current_item = self.list_widget.currentItem()
        if current_item:
            self.list_widget.takeItem(self.list_widget.row(current_item))

    def clear_list_widget(self) -> None:
        """
        Clear all items from the list widget.
        """
        self.list_widget.clear()

# Example usage:
'''
# Create the selector with your list widget
selector = ShapefileSelector(self.conf_shp_tif_listWidget)

# Add shapefile to list
selector.append_to_list_widget()

# Remove selected item (connect to a remove button)
self.btn_remove.clicked.connect(selector.remove_selected_item)

# Clear all items (connect to a clear button)
self.btn_clear.clicked.connect(selector.clear_list_widget)
'''
