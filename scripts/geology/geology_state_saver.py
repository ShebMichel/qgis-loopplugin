# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
                                 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Center of Exploration Targeting, UWA
        email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from typing import Dict, List
from PyQt5.QtWidgets import QComboBox, QLineEdit

class StateSaver:
    """
    A class to save and restore the state of Qt widgets, specifically handling
    QComboBoxes (both standard and editable) and QLineEdits.
    """
    def __init__(
        self,
        geology_combo_boxes: List[QComboBox],
        geology_param_boxes: List[QComboBox],  # These are editable QComboBoxes
        sill_QLineEdit: QLineEdit,
        intrusion_QLineEdit: QLineEdit,
        geology_QLineEdit: QLineEdit
    ):
        self.geology_combo_boxes = geology_combo_boxes
        self.geology_param_boxes = geology_param_boxes
        self.sill_QLineEdit = sill_QLineEdit
        self.intrusion_QLineEdit = intrusion_QLineEdit
        self.geology_QLineEdit   =geology_QLineEdit

    def save_parameters(self) -> Dict:
        # Get all items from each combo box, with current item first
        geology_front_cbox = ["Formation", "Group", "Supergroup", "Description", "Fm code", "Rocktype 1", "Rocktype 2", "Polygon ID", "Min Age", "Max Age"]
        geol_alg_keys      = ["c", "g", "g2", "ds", "u", "r1", "r2", "o-geol", "min", "max"]
        user_field_keys =["Pluton dip", "Pluton Form","Intrusion Mode", "Max Thickness", "Thickness buffer", "Contact Decimate", "Contact Dip", "Contact Orientation Decimate", "Misorientation"]
        combo_all_items = {}
        for idx, box in enumerate(self.geology_combo_boxes):
            current = box.currentText()
            all_items = [box.itemText(i) for i in range(box.count())]
            # Remove current item from list if it exists
            if current in all_items:
                all_items.remove(current)
            # Add current item at the beginning
            combo_all_items[geology_front_cbox[idx]] = [current] + all_items

        state = {
            'geology_combos': dict(zip(geol_alg_keys,[box.currentText() for box in self.geology_combo_boxes])),
            'geology_params': [param_obj.currentText() if isinstance(param_obj, QComboBox) 
                             else param_obj.text() for param_obj in self.geology_param_boxes]}

        # New dictionary with values from QLineEdit
        new_data = {
            'Sill Text': self.sill_QLineEdit.text(),
            'Intrusion Text': self.intrusion_QLineEdit.text()
        }
        # Merge dictionaries
        new_state = {**state['geology_combos'], **new_data}
        #print(f" new state : {new_state}")

        new_geol_param = dict(zip(user_field_keys,state['geology_params']))
        #print(f" The data for new_geol_param {new_geol_param}")
      


        full_data_dict ={"geology_head":new_state, "geology_params": new_geol_param, "geo_path":self.geology_QLineEdit.text(),"GEOL JSON": combo_all_items}#state.update({"JSON": combo_all_items})
        return full_data_dict


    def clear_all(self) -> None:
        """
        Clears all widgets to their default state.
        """
        # Clear standard combo boxes
        for box in self.geology_combo_boxes:
            box.setCurrentIndex(0)

        # Clear editable combo boxes
        for box in self.geology_param_boxes:
            if box.isEditable():
                box.lineEdit().clear()
            else:
                box.setCurrentIndex(0)

        # Clear line edits
        self.sill_QLineEdit.clear()
        self.intrusion_QLineEdit.clear()
 
############################
