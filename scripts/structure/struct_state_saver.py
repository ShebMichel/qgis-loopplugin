# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop3DModelGenDockWidget
                                 A QGIS plugin
 This plugin preprocess map layers using map2loop and use its output for 3D modelling using LoopStructural.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Center of Exploration Targeting, UWA
        email                : michel.nzikoumamboukou@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from typing import Dict, List
from PyQt5.QtWidgets import QComboBox, QLineEdit

class StructStateSaver:
    """
    A class to save and restore the state of Qt widgets, specifically handling
    QComboBoxes (both standard and editable) and QLineEdits.
    """
    def __init__(
        self,
        struct_combo_boxes         : List[QComboBox],
        struct_param_boxes         : List[QComboBox],  # These are editable QComboBoxes
        struct_bedding_QLineEdit   : QLineEdit,
        struct_overturned_QLineEdit: QLineEdit,
        struct_line_edit           : QLineEdit
    ):

        self.struct_combo_boxes          = struct_combo_boxes
        self.struct_param_boxes          = struct_param_boxes
        self.struct_bedding_QLineEdit    = struct_bedding_QLineEdit
        self.struct_overturned_QLineEdit = struct_overturned_QLineEdit
        self.struct_QLineEdit            = struct_line_edit


    def save_parameters(self) -> Dict:
        # Get all items from each combo box, with current item first
        struct_front_cbox = ["Dip", "Dip Direction", "Feature", "Dip Direction Convention", "Overturned Field", "Point ID"]
        struct_alg_keys      = ["d", "dd", "sf", "otype", "bo","gi"]
        user_field_keys =["Misoreientation", "Decimate"]
        combo_all_items = {}
        for idx, box in enumerate(self.struct_combo_boxes):
            current = box.currentText()
            all_items = [box.itemText(i) for i in range(box.count())]
            # Remove current item from list if it exists
            if current in all_items:
                all_items.remove(current)
            # Add current item at the beginning
            combo_all_items[struct_front_cbox[idx]] = [current] + all_items

        state = {
            'struct_combos': dict(zip(struct_alg_keys,[box.currentText() for box in self.struct_combo_boxes])),
            'struct_params': [param_obj.currentText() if isinstance(param_obj, QComboBox) 
                             else param_obj.text() for param_obj in self.struct_param_boxes]}

        # New dictionary with values from QLineEdit
        new_data = {
            'Bedding Text': self.struct_bedding_QLineEdit.text(),
            'Overturned Text': self.struct_overturned_QLineEdit.text()
        }

        # Merge dictionaries
        new_state = {**state['struct_combos'], **new_data}
        #print(f" new state : {new_state}")

        new_geol_param = dict(zip(user_field_keys,state['struct_params']))
        #print(f" The data for new_geol_param {new_geol_param}")
      
        full_data_dict ={"struct_head":new_state, "struct_params": new_geol_param, "struct_path":self.struct_QLineEdit.text(),"STRUCT JSON": combo_all_items}
        return full_data_dict


    def clear_all(self) -> None:
        """
        Clears all widgets to their destruct state.
        """
        # Clear standard combo boxes
        for box in self.struct_combo_boxes:
            box.setCurrentIndex(0)

        # Clear editable combo boxes
        for box in self.struct_param_boxes:
            if box.isEditable():
                box.lineEdit().clear()
            else:
                box.setCurrentIndex(0)

        # Clear line edits
        self.struct_bedding_QLineEdit.clear()
        self.struct_overturned_QLineEdit.clear()
 
############################
